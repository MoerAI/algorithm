# Problem
"""
스타트링크가 입주한 사무실은 방 번호를 직접 정할 수 있다. 방 번호를 정하려면 1층 문방구에서 파는 숫자를 구매해야 한다.
숫자를 구매하기 위해 준비한 금액은 M원이고, M원을 모두 사용해야 한다.

문방구에서 파는 숫자는 0부터 N-1까지이고, 각 숫자 i의 가격은 Pi이다.
문방구에서는 같은 숫자를 여러 개 구매할 수 있고, 문방구는 매우 많은 재고를 보유하고 있기 때문에, 항상 원하는 만큼 숫자를 구매할 수 있다.
방 번호가 0이 아니라면 0으로 시작할 수 없다.

예를 들어, N = 3, M = 21, P0 = 6, P1 = 7, P2 = 8이라면, 만들 수 있는 가장 큰 방 번호는 210이다.
M원을 모두 사용해서 만들 수 있는 가장 큰 방 번호를 구해보자.
"""

# Input
"""
첫째 줄에 N이 주아진다. 둘째 줄에는 공백으로 구분된 P0, ..., PN-1이 주어진다. 마지막 줄에는 M이 주어진다.
"""

# Output
"""
첫째 줄에 M원을 사용해서 만들 수 있는 가장 큰 방 번호를 출력한다. 적어도 하나의 숫자를 살 수 있는 입력만 주어진다.
"""

# Example
"""
|Input1|
3
6 7 8
21
|Output1|
210

|Input2|
3
5 23 24
30
|Output2|
20

|Input3|
4
1 5 3 2
1
|Output3|
0

|Input4|
10
1 1 1 1 1 1 1 1 1 1
50
|Output4|
99999999999999999999999999999999999999999999999999
"""

# Solution
# 딱봐도 그리디 알고리즘
import sys
input = sys.stdin.readline

n = int(input())
p = list(map(int, input().split()))
m = int(input())
dp = [-float("inf") for _ in range(m+1)]

for i in range(n-1, -1, -1):
    lp = p[i]
    for j in range(lp, m+1):
        dp[j] = max(dp[j], i, dp[j-lp]*10+i)
print(dp[m])